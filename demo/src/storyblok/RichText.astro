---
import { type RichTextType } from "storyblok-rich-text-astro-renderer";
import RichTextRenderer from "storyblok-rich-text-astro-renderer/RichTextRenderer.astro";
import { storyblokEditable } from "@storyblok/astro";
import Link from "../components/Link.astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Text from "../components/Text.astro";
import BulletList from "../components/BulletList.astro";
import Blockquote from "../components/Blockquote.astro";
import Picture from "../components/Picture.astro";
import InlineCode from "../components/InlineCode.astro";
import Styled from "../components/Styled.astro";
import Heading from "../components/Heading.astro";
import { Code } from "astro:components";

export interface Props {
  blok: {
    text: RichTextType;
  };
}

const { blok } = Astro.props;
const { text } = blok;
---

<RichTextRenderer
  content={text}
  schema={{
    nodes: {
      heading: ({ attrs: { level }, content }) => ({
        component: Heading,
        props: {
          as: `h${level}`,
          text: content?.[0].text,
        },
      }),
      paragraph: () => ({
        component: Text,
        props: {
          class: "this-is-paragraph",
        },
      }),
      ordered_list: () => ({
        component: "ol",
        props: {
          class: "ordered-list",
        },
      }),
      bullet_list: () => ({
        component: BulletList,
      }),
      list_item: () => ({
        component: "li",
        props: {
          class: "list-item",
          style: {
            padding: "5px 0",
          },
        },
      }),
      blockquote: () => ({
        component: Blockquote,
      }),
      image: ({ attrs }) => ({
        component: Picture,
        props: attrs,
      }),
      code_block: ({ attrs, content }) => ({
        component: Code, // native Astro Code component
        props: {
          lang: attrs.class?.split("-")[1],
          theme: "solarized-dark",
          code: content?.[0].text,
        },
      }),
    },
    marks: {
      link: ({ attrs }) => {
        const { custom, ...restAttrs } = attrs;

        return {
          component: Link,
          props: {
            link: { ...custom, ...restAttrs },
            class: "i-am-link",
          },
        };
      },
      styled: ({ attrs }) => ({
        component: Styled,
        props: attrs,
      }),
      code: () => ({
        component: InlineCode,
      }),
    },
  }}
  resolver={(blok) => {
    return {
      component: StoryblokComponent,
      props: { blok },
    };
  }}
  textResolver={(text) => {
    const currentYear = new Date().getFullYear().toString();
    return {
      content: text.replaceAll("{currentYear}", currentYear),
    };
  }}
  {...storyblokEditable(blok)}
/>
